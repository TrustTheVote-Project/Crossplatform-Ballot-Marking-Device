import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
import { parseString } from 'xml2js';
import { Parser } from 'xml2js';
import { BallotSelection } from './BallotSelection';
import { Contest } from '../classes/Contest';
import { NavController, Platform } from 'ionic-angular';
import { BallotPage } from '../pages/home/BallotPage';
import { promisify } from 'util';



export class Election {
    readonly CONTESTQUERY = 'ElectionReport.Election.ContestCollection.Contest';
    public xml: string = "";
    private jsonObj: string = "";
    public Contests: Contest[] = new Array(10);
    public myhttp: Http;
    private jsonQuery = require('json-query');
    private contestNames: string[] = new Array();
    public ready: boolean = false;

    public edfFile: string;

    constructor(_http: Http, aString: string, navCtrl: NavController) {
        this.myhttp = _http;
        if (null != aString) {
            this.edfFile = aString;
            try {
                let jsonData;
                let xmlData;
                let myParser = new Parser({ "attrkey": "@", "charkey": "#", "mergeAttrs": true });
                this.myhttp.get(this.edfFile).map(res => res.text()).subscribe(data => {
                    this.xml = data.toString();

                    xmlData = data.toString();

                    myParser.parseString(xmlData, (err, jsonData) => {

                        this.jsonObj = jsonData;
                        //                        var printContestNamesPromise = promisify(printContestNames);
                        //                       var setContestsPromise = promisify(setContests);
                        //                     var getContestNamesPromise = promisify(getContestNames);
                        async function executeAsyncTask() {
                            await this.printContestNamesPromise();
                            await this.setContests();
                            await this.getContestNamesPromise();
                        }
                        //                   setContestsPromise().then(function () {
                        //                     printContestNamesPromise
                        //               }).then(function () {
                        //                 getContestNamesPromise()
                        //           }).then(function () { this.ready = true });
                        //     });
                        //                });


                    } catch (e) {
                        console.log("Error:", e);
                    }
                }



    }

    isReady(): boolean {
                return (this.ready);
            }

            setReady(value: boolean) {
                this.ready = value;
            }


            /*
                getballotSelections(): ballotSelection[] {
                    console.log("entering getballotSelections");
                }
                */

            getBallotSelection(contest: Contest) {

            }

            getContests(): Contest[] {
                return this.Contests;
            }



            getJsonObj(): string {
                return this.jsonObj;
            }


        }


        function setContests() {
            console.log(JSON.stringify(this.jsonObj));
            var aBallotSelection: BallotSelection
            var values = this.jsonQuery(this.CONTESTQUERY, { data: this.jsonObj }).value;
            values.forEach(element => {
                var aContest = new Contest(element, this);
                this.Contests.push(aContest);
            });
        }

        function getContestNames(): String[] {
            console.log("entering getContestName()");
            this.Contests.forEach(element => {
                this.contestNames.push(element.getContestName());
            });
            console.log("exiting getContestName() - contestNames has " + this.contestNames.length + " elements");
            return this.contestNames;
        }

        function printContestNames() {
            this.Contests.forEach(element => {
                //element is a Contest...
                console.log("Contest name: " + element.getContestName());
                //for each Contest, get the Contestants...
                element.getBallotSelections().forEach(ballotselection => {
                    var candidateName;
                    candidateName = ballotselection.getCandidatesString().trim();
                    if (candidateName !== undefined && candidateName != "undefined") {
                        console.log(candidateName);
                    }

                });
            });
        }